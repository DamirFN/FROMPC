НАЧАЛО РАБОТЫ
1. Установить GitHub
2. Прописать основные конфигурации в командной строке GitHub Bash:
1) Версия программы:

 git --version.

2) Указываем глобальные конфигурации:

git config --global user.name "Name"

git config --global user.email email@example.ru 

*Обратите внимание, что в этих командах есть опция --global. 
Это значит, что вам достаточно будет один раз ввести эти данные и они 
будут сохранены для всех проектов. Если вы захотите поменять информацию,
то нужно будет ввести ту же команду, только без  --global.

---------------------------------------------------------
ОСНОВНЫЕ КОМАНДЫ ДЛЯ РАБОТЫ С ДРЕВОМ PC
pwd	показать текущий каталог
ls	показать файлы в данной папке, кроме скрытых
ls -f	показать файлы в данной папке, включая скрытые
cd c:	перейти к диску (в примере диск C)
cd app	перейти в конкретный каталог (в примере папка app)
cd -	вернуться назад
cd ..	подняться на один уровень вверх
cd ../..	подняться на два уровня вверх
mkdir	создать папку

---------------------------------------------------------
СОЗДАНИЕ РЕПОЗИТОРИЯ
Создать новую папку в корневом каталоге (терминал открывается в нём по 
умолчанию).
1 mkdir ... (projects)* - выбраное название на угат, можно свое
Создать новую папку в корневом каталоге (терминал открывается в нём по 
умолчанию).

2 cd ...(projects)
Перейти внутрь projects

3 mkdir ...(Skillfactory)* - выбраное название на угат, можно свое 
где вы находитесь в предпологаемой ...(projects)

Создать новую папку Skillfactory.
4 cd Skillfactory

Перейти внутрь Skillfactory.
5 git init
Инициализировать папку Skillfactory как Git-репозиторий.

Либо:
Просто зайти в любую понравившуюся папку на PС, вызвать контекстное
меню правой кнопкой мыши и там нажать Git bush, в открывшемся терминале
набрать комманду git init и эта папка сразу инициализируется как 
Git-репозиторий

После все наберте команду: git status
Статус репозитория показывает информацию о текущем состоянии 
репозитория: есть ли что-то новое в репозитории, изменились ли какие-то файлы, и если да, то какие, и так далее.

---------------------------------------------------------
СОЗДАНИЕ КОММИТА
Чтобы добавить все файлы, которые находятся в директории, выполните следующую команду:

git add -A

В будущем, чтобы добавлять отдельные файлы, используйте ту же команду 
add, но с указанием имени файла:

git add this.js или git add . 

git commit — команда, которая создаёт коммит с рядом параметров.

Флаг -m означает, что следом идёт сообщение (message): ярлык для наших 
изменений.

---------------------------------------------------------
GIT COMMIT
Команда git commit делает «снимок» изменений проекта. Добавленные коммиты
можно рассматривать как «безопасные» версии проекта: Git никогда не 
изменит их, если только вы специальным образом не потребуете этого.

Если выполнить команду git commit без каких-либо флагов, то запустится 
текстовый редактор, запрашивающий у вас сообщение для коммита. Чтобы 
сразу указать сообщение для коммита используется флаг -m (message).

git commit -a	При выполнении команды с флагом -a будет сделан снимок 
всех изменений в рабочем каталоге. Это включает в себя только изменения 
отслеживаемых файлов (то есть тех, которые были добавлены с помощью 
git add ранее).
git commit -am "commit message"	Сочетание флагов -a и -m создаёт коммит 
всех изменений с сообщением для коммита.
git commit --amend	Выбранные изменения будут добавлены в последний 
коммит. Команда также вызовет открытие системного текстового редактора 
для внесения изменений в сообщение коммита. Эту команду часто используют,
если была допущена ошибка.

---------------------------------------------------------
РАБОТА С ВЕТВЛЕНИЕМ
Команда создания новой ветки
git branch awesome-branch где awesome произвольное название

Переход на другую ветку:
git checkout awesome-branch

что бы произвести слияние и сохранить изменения с одной ветки на другую:
1) Выбирают ветку старую (например master командой git checkout master)
2) Затем команду git merge black-friday 
(новая ветка с новшеством black-friday)

Что бы удалить ненужную ветку:
git branch -d ...(black-firday)

Команду git branch --list. Она выведет список веток, которые существуют 
в вашем локальном репозитории. Текущая ветка master будет выделена 
зелёным цветом

Команду git branch --list -v . Вы увидите информацию о последних коммитах
каждой из веток. Так как коммитов в ветку

Что бы преравать слияние 
git merge --abort

---------------------------------------------------------
КАК СВЯЗАТЬ ЛОКАЛЬНЫЙ РЕПОЗИТОРИЙ С УДАЛЕННЫМ
Что бы связать локальный репозиторий на вашем компьютере с удалённым 
репозиторием, который вы только что создали на GitHub. Чтобы это 
осуществить, снова перейдём в терминал.

 // в папке ...(githubProject)* 

git remote add origin https://github.com/<your_name>/<remote_repository_name>.git

Обратите внимание, что вместо <your_name> и <remote_repository_name> 
следует указать ваш аккаунт на Github и название созданного на Github 
репозитория.

Остался последний шаг: пришло время добавить локальные изменения (коммит)
на удалённый сервер. Для этого в терминале выполните команду:

git push origin master

Терминал запросит ваш Username и пароль.

Теперь вы можете видеть изменения в репозитории по адресу:

https://github.com/<your_name>/<remote_repository_name>

Создание репозитория локального путем клонирования ветки удаленного
репозитория

git clone https://github.com/<your_name>/
<remote_repository_name> -b ... clonebranch* и название ветки удаленного
репозитория

---------------------------------------------------------
ОСНОВНЫЕ КОМАНДЫ ДЛЯ РАБОТЫ С ТЕРМИНАЛО GIT HUB
Создание рабочей области: 
clone   клонирование репозитория в новый каталог
init    создание пустого репозитория Git или переинициализация 
существующего

Работа с текущими изменениями:
add      добавление содержимого файла в индекс
mv       перемещение или переименование файла, каталога или символьной 
ссылки
rm       удаление файлов из рабочего каталога и индекса

Просмотр истории и текущего состояния:
bisect   выполнить двоичный поиск изменения, которое вносит ошибку
grep     вывод строк, соответствующих шаблону
log      вывод истории коммитов
show     вывод различных типов объектов
status   вывод состояния рабочего каталога

Выращивание, отметка и настройка вашей общей истории:
branch   вывод списка веток, их создание или удаление
checkout пререключение веток или восстановление файлов в рабочем каталоге
(git checkout -b New_Branch*  -создание ветки и переход в нее) 
commit   запись изменений в репозиторий
diff     вывод разницы между коммитами, коммитом и рабочим каталогом
merge    объединение одной или нескольких историй разработики сместе
rabase   повторно примениеть коммит над верхушкой другой ветки
tag      создание метки, вывод списка, удаление или проверка метки,
подписанной с помощью GPG

Совместная работа:
fetch    загрузка объектов и ссылок из другого репозитория(обновить 
данные о удаленном репозитории)
pull     извлечение изменений и объединение с другими репозтрорием или
локальной веткой(стягивать с удаленного репозитория)
push     обновление внешних ссылок и связанных объектов(заливать на 
удаленный репозиторий)




  